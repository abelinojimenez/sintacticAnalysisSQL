/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package analisadorpython;

import java.awt.List;
import java.io.StreamTokenizer;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Stack;
import java.util.StringTokenizer;
import java.util.Vector;
import javax.swing.JOptionPane;

/**
 *
 * @author wwwca
 */
public class frmanalisis extends javax.swing.JFrame {

    /**
     * Creates new form frmanalisis
     */
    
    //------------------------ TABLA DE SIMBOLOS ----------------------------------
            String Tabladesimbol[]={"#","def","class",":",".","\"","'","print","+","-","*","/","//","%","=","&","|","<<",">>",
                "true","false","and","or","not","==","!=","<",">","<=",">=","(",")","[","]",
                "if","for","in","while","raw_input","print","int","float","str","tuple","list","dict"};
    //-----------------------------------------------------------------------------
      Queue<String> lex=new LinkedList<>();
       Queue<String> parentisis;
     
    //        
    public frmanalisis() {
        initComponents();
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        txtcodigo = new javax.swing.JTextArea();
        jLabel1 = new javax.swing.JLabel();
        btnLexico = new javax.swing.JButton();
        btnAnalizadorSintactico = new javax.swing.JButton();
        btnAnalisisSemantico = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        txtresultados = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        txterror = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        txtcodigo.setColumns(20);
        txtcodigo.setRows(5);
        jScrollPane1.setViewportView(txtcodigo);

        jLabel1.setText("Codigo");

        btnLexico.setText("Analisis Lexico");
        btnLexico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLexicoActionPerformed(evt);
            }
        });

        btnAnalizadorSintactico.setText("Analisis Sintactico");
        btnAnalizadorSintactico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalizadorSintacticoActionPerformed(evt);
            }
        });

        btnAnalisisSemantico.setText("Analisis Semantico");
        btnAnalisisSemantico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAnalisisSemanticoActionPerformed(evt);
            }
        });

        txtresultados.setColumns(20);
        txtresultados.setRows(5);
        jScrollPane4.setViewportView(txtresultados);

        jLabel2.setText("Resultado:");

        jLabel3.setText("Errores:");

        txterror.setColumns(20);
        txterror.setRows(5);
        jScrollPane5.setViewportView(txterror);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnLexico, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAnalizadorSintactico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnAnalisisSemantico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 312, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addGap(5, 5, 5)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnLexico)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAnalizadorSintactico)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnAnalisisSemantico)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 292, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(89, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnLexicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLexicoActionPerformed
                analisisLexico();
    }//GEN-LAST:event_btnLexicoActionPerformed

    private void btnAnalizadorSintacticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalizadorSintacticoActionPerformed
       AnalisisSintactico();
    }//GEN-LAST:event_btnAnalizadorSintacticoActionPerformed

    private void btnAnalisisSemanticoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAnalisisSemanticoActionPerformed
       analissemantico();
    }//GEN-LAST:event_btnAnalisisSemanticoActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(frmanalisis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(frmanalisis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(frmanalisis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(frmanalisis.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new frmanalisis().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAnalisisSemantico;
    private javax.swing.JButton btnAnalizadorSintactico;
    private javax.swing.JButton btnLexico;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTextArea txtcodigo;
    private javax.swing.JTextArea txterror;
    private javax.swing.JTextArea txtresultados;
    // End of variables declaration//GEN-END:variables

    private void analisisLexico() {
       String[] lineas=txtcodigo.getText().split("\n");
       // primero 
       txtresultados.setText("");
       txterror.setText("");
       String Lexico="";
       for(int i=0;i<lineas.length;i++){
           //System.out.println(lineas[i]);
           StringTokenizer stlinea=new StringTokenizer(lineas[i]," ");
           while (stlinea.hasMoreTokens()) {
                        String token=stlinea.nextToken();
                        boolean isvalid=false;
                        for(int k=0;k<token.length();k++){
                            if(token.charAt(k)=='ñ' || token.charAt(k)=='Ñ' || token.charAt(k)=='´' || token.charAt(k)=='¨'){
                                txterror.append("Error en token invalido "+token.charAt(k)+" en linea: "+(i+1)+"\n");
                                isvalid=true;                          
                            }                          
                        }
           
                        if(!isvalid && isSimboltable(token))
                          Lexico=Lexico+token+"\n";
                          // lex.add(tokek
                          
                          
                           
             }
           
       }
       txtresultados.append(Lexico);
      
    }

    private boolean isSimboltable(String token) {
           for(int i=0;i<Tabladesimbol.length;i++){
               if(Tabladesimbol[i].equalsIgnoreCase(token))
                   return true;
           }
                return false;
    }

    private void AnalisisSintactico() {
         String[] lineas=txtcodigo.getText().split("\n");
       // primero 
       txtresultados.setText("");
       txterror.setText("");
       String Lexico="";
       boolean error=false;
       for(int i=0;i<lineas.length;i++){
           if(!isclosebreak(lineas[i])){
              txterror.append("error no se cerro ( ) o [ ] o comillas, en linea: "+(i+1)+"\n");
              error=true;
           }
       
           //System.out.println(lineas[i]);
           StringTokenizer stlinea=new StringTokenizer(lineas[i]," ");
           while (stlinea.hasMoreTokens()) {
                        String token=stlinea.nextToken();
               lex.add(token);
                       
             }
           boolean waitres=false,isfor=false;
           String tok="";
           
             while(!lex.isEmpty()){
                 tok=lex.peek();
                 lex.poll();
                 
                
                
                 if((tok.equalsIgnoreCase("def") || tok.equalsIgnoreCase("if") || tok.equalsIgnoreCase("elif") || tok.equalsIgnoreCase("while")|| tok.equalsIgnoreCase("else") || tok.equalsIgnoreCase("for")) && waitres)
                 {
                     error=true;
                    // if()
                    //  JOptionPane.showMessageDialog(this,"Analisis Sintactico Exitoso");
                 }else if(tok.equalsIgnoreCase("def") || tok.equalsIgnoreCase("if") || tok.equalsIgnoreCase("elif") || tok.equalsIgnoreCase("while")|| tok.equalsIgnoreCase("else") || tok.equalsIgnoreCase("for"))
                 {
                    //if(tok.equalsIgnoreCase("for")){
                      //  isfor=true;
                    //}
                     waitres=true;
                 }
             }
             if(waitres){
                 if(!tok.equalsIgnoreCase(":")){
                        txterror.append("Error falta ':' separado al final de la expresion, en linea: "+(i+1)+"\n");
                           waitres=false;
                         error=true;
                 }
            }
       }
        
         if(!error ){
             JOptionPane.showMessageDialog(this,"Analisis Sintactico Exitoso");
             txtresultados.append("Analisis de sintatico exitoso");
         }
      }

    private boolean ordentokencorrect() {
            
        
                return false;
    }

    private boolean putclosecorrect() {
                return false;
        }

    private boolean isclosebreak(String linea) {
        int abre=0;
        
                for(int i=0;i<linea.length();i++){
                    if(linea.charAt(i)=='[' || linea.charAt(i)=='('){
                       
                        abre++;
                    }
                }
                 for(int i=0;i<linea.length();i++){
                     if(linea.charAt(i)==']' || linea.charAt(i)==')'){
                        abre--;
                    }
                }
                boolean iscomilla=false;
                         
                 for(int i=0;i<linea.length();i++){
                     if(linea.charAt(i)=='\"'){
                         if(iscomilla){
                             abre--;
                             iscomilla=false;
                         }else{
                             iscomilla=true;
                         abre++;
                         } 
                        
                    }
                }
                 System.out.println(""+abre);
                if(abre==0 )return true;
    return false;
    }
    
    
    
    
    
    
    

      // Queue<variable> idvar=new LinkedList<>();
       Vector<variable> idvar=new Vector<>();
    private void analissemantico(){
           String[] lineas=txtcodigo.getText().split("\n");
           
       // primero 
       txtresultados.setText("");
       txterror.setText("");
       
       for(int i=0;i<lineas.length;i++){
           String[] TOken=lineas[i].split(" ");
           System.out.println(""+TOken.length);
           if(TOken.length==3 ){
               variable varb=new variable();
               varb.nombre=TOken[0];
               varb.tipo=vertipo(TOken[2]);
               varb.valor=TOken[2];
               idvar.add(varb);
               System.out.println(""+ varb.tipo);
           }else if(TOken.length==5){
               System.out.println("token 1 "+TOken[2]+" token 2 "+TOken[4]);
               String tip1=buscar(TOken[2]);
               String tip2=buscar(TOken[4]);
               System.out.println(" "+tip1 + " "+tip2);
               if(tip1.equals(tip2)){
                   txtresultados.append("tipos de datos valido\n");
               }else{
                   txtresultados.append("tipos de datos invalido para operacion\n");
               }
           }
           
       }
        idvar.clear();
   // idvar.clear();
    }

    private String vertipo(String dato) {
         boolean isnum=true,isletra=false;
           for(int i=0;i<dato.length();i++){
               if(dato.charAt(i)<'0' || dato.charAt(i)>'9'){
                isnum=false;    
               }
           }
           if(isnum)return "number";
           else if(dato.charAt(0)=='\"' && dato.charAt(dato.length()-1)=='\"'){
                return "string";
           }
           
           return "object";
    }

    private String buscar(String vars) {
        for(int i=0;i<idvar.size();i++){
                if(idvar.get(i).nombre.equalsIgnoreCase(vars)){
                    return idvar.get(i).tipo;
                }
        }
        return "notfound";
    }

  
}
